// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentEaseLibrary.Models;

#nullable disable

namespace RentEaseLibrary.Migrations
{
    [DbContext(typeof(PropertyRentingDbContext))]
    partial class PropertyRentingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentEaseLibrary.Models.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<int>("BookingStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheackedInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheackedOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("BookingID");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserName");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.Favorite", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("UserName", "PropertyID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.RentProperty", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserName1")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PropertyId");

                    b.HasIndex("UserName1");

                    b.ToTable("RentProperty");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.SearchHistory", b =>
                {
                    b.Property<int>("SearchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchID"));

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SearchID");

                    b.HasIndex("UserName");

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("UserName");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.Booking", b =>
                {
                    b.HasOne("RentEaseLibrary.Models.RentProperty", "RentProperty")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId");

                    b.HasOne("RentEaseLibrary.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserName");

                    b.Navigation("RentProperty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.Favorite", b =>
                {
                    b.HasOne("RentEaseLibrary.Models.RentProperty", "Property")
                        .WithMany("Favorites")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentEaseLibrary.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.RentProperty", b =>
                {
                    b.HasOne("RentEaseLibrary.Models.User", null)
                        .WithMany("RentProperties")
                        .HasForeignKey("UserName1");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.SearchHistory", b =>
                {
                    b.HasOne("RentEaseLibrary.Models.User", "User")
                        .WithMany("SearchHistorys")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.RentProperty", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("RentEaseLibrary.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Favorites");

                    b.Navigation("RentProperties");

                    b.Navigation("SearchHistorys");
                });
#pragma warning restore 612, 618
        }
    }
}
